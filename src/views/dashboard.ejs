<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bulk Email Dashboard</title>
    <!-- Bootstrap CSS CDN -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      /* Basic custom styling to complement Bootstrap */
      body {
        background: #f5f7fb;
      }
      .sidebar {
        min-height: 100vh;
        background: #ffffff;
        border-right: 1px solid #e7eaf0;
      }
      .template-card {
        cursor: pointer;
      }
      .template-card.active {
        box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.08);
      }
      .editor {
        min-height: 260px;
      }
      .small-muted {
        font-size: 0.85rem;
        color: #6c757d;
      }
    </style>
  </head>
  <body>
    <!-- NAVBAR -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
      <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="#">BulkMailer Pro</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navmenu"
        >
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navmenu">
          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li class="nav-item"><a class="nav-link" href="#home">Home</a></li>
            <li class="nav-item">
              <a class="nav-link" href="#bulk">Bulk Sender</a>
            </li>
            <% if (user && user.role === "admin") { %>
            <li class="nav-item">
              <a class="nav-link" href="/adminDashboard">Admin</a>
            </li>
            <% } %>
          </ul>
        </div>
      </div>
    </nav>

    <div class="container-fluid">
      <div class="row g-0">
        <!-- LEFT SIDEBAR: Templates & Contacts -->
        <aside class="col-12 col-md-3 p-3 sidebar">
          <h6 class="mb-3">Email Templates</h6>
          <div id="templatesList" class="list-group mb-3"></div>

          <h6 class="mt-4">Contacts</h6>
          <div class="mb-2">
            <input
              id="contactsFile"
              type="file"
              accept=".csv"
              class="form-control form-control-sm"
            />
            <div class="form-text small-muted">
              Upload a CSV with an `email` column.
            </div>
          </div>
          <div class="mb-2">
            <button
              id="importContactsBtn"
              class="btn btn-sm btn-outline-primary w-100"
            >
              Import Contacts
            </button>
          </div>
          <div class="mt-3">
            <small class="small-muted">Contacts loaded:</small>
            <ul
              id="contactsPreview"
              class="list-unstyled small ps-0 mt-2"
              style="max-height: 160px; overflow: auto"
            ></ul>
          </div>
        </aside>

        <!-- MAIN CONTENT -->
        <main class="col-12 col-md-9 p-4">
          <div class="d-flex justify-content-between align-items-start mb-3">
            <div>
              <h4 class="mb-0">Bulk Sender</h4>
              <small class="small-muted"
                >Choose a template, edit content, then send or schedule your
                campaign.</small
              >
            </div>
            <div>
              <button id="previewBtn" class="btn btn-outline-secondary me-2">
                Preview
              </button>
              <button id="saveTemplateBtn" class="btn btn-outline-success me-2">
                Save Template
              </button>
              <button id="sendBtn" class="btn btn-primary">Send Now</button>

              <!-- Include password checkbox (UI only; we send pass whenever present) -->
              <div class="form-check d-inline-block ms-3">
                <input
                  class="form-check-input"
                  type="checkbox"
                  id="includePassword"
                />
                <label
                  class="form-check-label small-muted"
                  for="includePassword"
                >
                  Include password/service key with this campaign (not
                  recommended)
                </label>
              </div>

              <!-- campaign progress UI (inserted next to buttons) -->
              <div
                id="campaignProgress"
                class="mt-2"
                style="display: none; width: 320px"
              >
                <div id="progressText" class="small-muted">
                  Preparing campaign...
                </div>
                <div class="progress mt-2">
                  <div
                    id="progressBar"
                    class="progress-bar"
                    role="progressbar"
                    style="width: 0%"
                  >
                    0%
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="card mb-3">
            <div class="card-body">
              <!-- SENDER CONFIGURATION -->
              <h6 class="fw-semibold">Sender Configuration</h6>
              <div class="row g-2 align-items-center mt-2">
                <div class="col-sm-4">
                  <label class="form-label">Sender Name</label>
                  <input
                    id="senderName"
                    class="form-control"
                    placeholder="Company Name or Person"
                  />
                </div>
                <div class="col-sm-4">
                  <label class="form-label">Email Service</label>
                  <select id="emailService" class="form-select">
                    <option value="gmail">Gmail (OAuth)</option>
                    <option value="smtp">Webmail (SMTP)</option>
                    <option value="yahoo">Yahoo</option>
                    <option value="hotmail">Hotmail</option>
                  </select>
                </div>
                <div class="col-sm-4">
                  <label class="form-label">Email Address</label>
                  <input
                    id="emailAddress"
                    type="email"
                    class="form-control"
                    placeholder="you@company.com"
                  />
                </div>
              </div>

              <div class="row g-2 align-items-center mt-2">
                <div class="col-sm-6">
                  <label class="form-label">Password / Service Key</label>
                  <input
                    id="passwordService"
                    class="form-control"
                    placeholder="SMTP password or API key"
                  />
                </div>
                <div class="col-sm-6">
                  <label class="form-label">Best Regards (signature)</label>
                  <input
                    id="bestRegards"
                    class="form-control"
                    placeholder="e.g. â€” The Team"
                  />
                </div>
              </div>
            </div>
          </div>

          <!-- MAIL CONTENT EDITOR -->
          <div class="row">
            <div class="col-lg-6">
              <div class="card mb-3">
                <div class="card-body">
                  <h6 class="fw-semibold">Template Details</h6>
                  <div class="mb-2">
                    <label class="form-label">Title</label>
                    <input
                      id="title"
                      class="form-control"
                      placeholder="Short internal title (not sent)"
                    />
                  </div>
                  <div class="mb-2">
                    <label class="form-label">Subject</label>
                    <input
                      id="subject"
                      class="form-control"
                      placeholder="Email subject line"
                    />
                  </div>
                  <div class="mb-2">
                    <label class="form-label">Body (HTML allowed)</label>
                    <textarea
                      id="body"
                      class="form-control editor"
                      placeholder="Write your email body here..."
                    ></textarea>
                    <div class="form-text small-muted">
                      Use placeholders like {{ firstName }} to personalize.
                    </div>
                  </div>
                </div>
              </div>

              <!-- QUICK VARIABLES -->
              <div class="card">
                <div class="card-body">
                  <h6 class="fw-semibold">Quick Variables</h6>
                  <p class="small-muted mb-1">
                    Copy these into your body where needed:
                  </p>
                  <div class="d-flex gap-2 flex-wrap">
                    <button
                      class="btn btn-sm btn-outline-secondary btn-variable"
                      data-var="{{ firstName }}"
                    >
                      {{ firstName }}
                    </button>
                    <button
                      class="btn btn-sm btn-outline-secondary btn-variable"
                      data-var="{{ lastName }}"
                    >
                      {{ lastName }}
                    </button>
                    <button
                      class="btn btn-sm btn-outline-secondary btn-variable"
                      data-var="{{ email }}"
                    >
                      {{ email }}
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div class="col-lg-6">
              <!-- TEMPLATE PREVIEW & SEND SUMMARY -->
              <div class="card mb-3">
                <div class="card-body">
                  <h6 class="fw-semibold">Live Preview</h6>
                  <div
                    id="livePreview"
                    class="border rounded p-3"
                    style="background: #fff; min-height: 220px"
                  ></div>
                </div>
              </div>

              <div class="card">
                <div class="card-body">
                  <h6 class="fw-semibold">Send Summary</h6>
                  <ul class="list-unstyled mb-0">
                    <li>
                      <strong>Recipients:</strong>
                      <span id="recipientsCount">0</span>
                    </li>
                    <li>
                      <strong>Service:</strong> <span id="serviceLabel">-</span>
                    </li>
                    <li>
                      <strong>From:</strong> <span id="fromLabel">-</span>
                    </li>
                  </ul>
                  <br />
                  <!-- the log out button -->
                  <form action="/logout" method="get">
                    <button type="submit" id="logoutBtn" class="btn btn-primary">
                      Log Out
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>

    <!-- Bootstrap JS + small app JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // ------------------------
      // Client-side logic
      // ------------------------

      let senderName = "";
      let emailService = "";
      let emailAddress = "";
      let passwordService = "";
      let subject = "";
      let title = "";
      let body = "";
      let bestRegards = "";
      let contactsList = []; // array of {email, firstName?, lastName?}
      let scheduleTime = null;

      const TEMPLATES = [
        {
          id: "welcome",
          name: "Welcome - Short",
          subject: "Welcome to our community!",
          title: "Welcome Short",
          body: "<p>Hello {{firstName}},</p><p>Welcome! We're excited to have you.</p><p>{{bestRegards}}</p>",
        },
        {
          id: "promo",
          name: "Promotional",
          subject: "Limited time offer â€” don't miss out",
          title: "Promo",
          body: "<h3>Special Offer</h3><p>Hi {{firstName}}, check this out.</p><p>{{bestRegards}}</p>",
        },
        {
          id: "newsletter",
          name: "Monthly Newsletter",
          subject: "This month at a glance",
          title: "Newsletter",
          body: "<p>Dear {{firstName}},</p><p>Here is what's new.</p><p>{{bestRegards}}</p>",
        },
      ];

      // Render templates
      const templatesListEl = document.getElementById("templatesList");
      function renderTemplates() {
        templatesListEl.innerHTML = "";
        TEMPLATES.forEach((t) => {
          const btn = document.createElement("button");
          btn.className = "list-group-item list-group-item-action template-card";
          btn.innerHTML = `<div class="d-flex justify-content-between align-items-center"><div>${t.name}</div><small class="text-muted">${t.title}</small></div>`;
          btn.onclick = () => selectTemplate(t.id);
          templatesListEl.appendChild(btn);
        });
      }

      // select template
      function selectTemplate(id) {
        const t = TEMPLATES.find((x) => x.id === id);
        if (!t) return;
        title = t.title;
        subject = t.subject;
        body = t.body;
        document.getElementById("title").value = title;
        document.getElementById("subject").value = subject;
        document.getElementById("body").value = body;
        updatePreview();
        document.querySelectorAll(".template-card").forEach((el) => el.classList.remove("active"));
        event?.currentTarget?.classList?.add("active");
      }

      function updatePreview() {
        const preview = document.getElementById("livePreview");
        const signature = bestRegards || "â€” Team";
        const html = `<div><strong>${subject}</strong><div style="margin-top:.6rem">${body || ""}</div><div style="margin-top:1rem">${signature}</div></div>`;
        preview.innerHTML = html;
        document.getElementById("recipientsCount").innerText = contactsList.length;
        document.getElementById("serviceLabel").innerText = emailService || "-";
        document.getElementById("fromLabel").innerText = senderName && emailAddress ? `${senderName} <${emailAddress}>` : "-";
      }

      // Wire inputs to state
      document.getElementById("senderName").addEventListener("input", (e) => {
        senderName = e.target.value;
        updatePreview();
      });
      document.getElementById("emailService").addEventListener("change", (e) => {
        emailService = e.target.value;
        updatePreview();
      });
      document.getElementById("emailAddress").addEventListener("input", (e) => {
        emailAddress = e.target.value;
        updatePreview();
      });
      document.getElementById("passwordService").addEventListener("input", (e) => {
        passwordService = e.target.value;
      });
      document.getElementById("subject").addEventListener("input", (e) => {
        subject = e.target.value;
        updatePreview();
      });
      document.getElementById("title").addEventListener("input", (e) => {
        title = e.target.value;
      });
      document.getElementById("body").addEventListener("input", (e) => {
        body = e.target.value;
        updatePreview();
      });
      document.getElementById("bestRegards").addEventListener("input", (e) => {
        bestRegards = e.target.value;
        updatePreview();
      });

      // Quick variable buttons
      document.querySelectorAll(".btn-variable").forEach((b) => {
        b.addEventListener("click", () => {
          const v = b.dataset.var;
          const ta = document.getElementById("body");
          ta.value = ta.value + "\n" + v;
          body = ta.value;
          updatePreview();
        });
      });

      // CSV import parser
      document.getElementById("importContactsBtn").addEventListener("click", () => {
        const f = document.getElementById("contactsFile").files[0];
        if (!f) return alert("Please choose a CSV file first.");
        const reader = new FileReader();
        reader.onload = (e) => {
          const text = e.target.result;
          parseCSVContacts(text);
        };
        reader.readAsText(f);
      });

      function parseCSVContacts(csvText) {
        const lines = csvText.split(/\r?\n/).filter(Boolean);
        const header = lines.shift().split(",").map((h) => h.trim());
        const emailIndex = header.findIndex((h) => h.toLowerCase() === "email");
        const firstNameIndex = header.findIndex((h) => h.toLowerCase() === "firstname" || h.toLowerCase() === "first_name");
        const lastNameIndex = header.findIndex((h) => h.toLowerCase() === "lastname" || h.toLowerCase() === "last_name");
        if (emailIndex === -1) {
          alert('CSV must contain an "email" column');
          return;
        }
        contactsList = lines.map((l) => {
          const cols = l.split(",");
          return {
            email: cols[emailIndex]?.trim(),
            firstName: cols[firstNameIndex]?.trim(),
            lastName: cols[lastNameIndex]?.trim(),
          };
        }).filter((c) => c.email);
        renderContactsPreview();
        updatePreview();
      }

      function renderContactsPreview() {
        const ul = document.getElementById("contactsPreview");
        ul.innerHTML = "";
        contactsList.slice(0, 20).forEach((c) => {
          const li = document.createElement("li");
          li.textContent = c.email + (c.firstName ? ` â€” ${c.firstName}` : "");
          ul.appendChild(li);
        });
      }

      function disableControls(disabled) {
        const sendBtn = document.getElementById("sendBtn");
        if (sendBtn) sendBtn.disabled = disabled;
        const saveBtn = document.getElementById("saveTemplateBtn");
        if (saveBtn) saveBtn.disabled = disabled;
        const previewBtn = document.getElementById("previewBtn");
        if (previewBtn) previewBtn.disabled = disabled;
      }

      // ----------------------
      // Main dashboard sender
      // ----------------------
      async function sendCampaignMain() {
        // Basic validation/state sync
        if (!emailAddress) return alert("Please configure sender email.");
        if (contactsList.length === 0) return alert("No recipients loaded. Import a contacts CSV first.");
        if (!subject && !title) {
          if (!confirm("No subject set. Continue?")) return;
        }

        const contacts = contactsList.map((c) => c?.email?.trim()).filter(Boolean);

        // read selected provider and map smtp -> webmail
        const rawProvider = (document.getElementById("emailService") || {}).value || emailService || "webmail";
        const provider = rawProvider === "smtp" ? "webmail" : rawProvider;
        const pass = passwordService ? passwordService : undefined;

        // debug
        console.log("sendCampaignMain -> provider:", provider, "user:", emailAddress ? "[provided]" : "[none]", "contacts:", contacts.length);

        const payload = {
          provider,
          user: emailAddress,
          ...(pass ? { pass } : {}),
          subject,
          body,
          contacts,
        };

        // UI progress
        const progressWrap = document.getElementById("campaignProgress");
        const progressText = document.getElementById("progressText");
        const progressBar = document.getElementById("progressBar");
        if (progressWrap) progressWrap.style.display = "block";
        if (progressBar) {
          progressBar.style.width = "0%";
          progressBar.textContent = "0%";
        }
        if (progressText) progressText.textContent = "Sending campaign...";
        disableControls(true);

        try {
          const res = await fetch("/api/bulkemail/campaign", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });

          if (!res.ok) {
            const err = await res.json().catch(() => ({ error: res.statusText }));
            throw new Error(err.error || res.statusText || "Send failed");
          }

          const json = await res.json();

          if (json.total) {
            const pct = Math.round(((json.sent || 0) / json.total) * 100);
            if (progressBar) {
              progressBar.style.width = pct + "%";
              progressBar.textContent = pct + "%";
            }
            if (progressText) progressText.textContent = `Sent ${json.sent || 0} / ${json.total}. Failed: ${json.failed || 0}`;
          } else {
            if (progressBar) {
              progressBar.style.width = "100%";
              progressBar.textContent = "100%";
            }
            if (progressText) progressText.textContent = json.message || "Campaign accepted.";
          }

          console.log("Campaign response:", json);
          alert("Campaign processed. See console for server response.");
        } catch (err) {
          console.error("Campaign error:", err);
          console.log("Demo fallback payload:", payload);
          alert("Demo: payload prepared. Open console (F12) to inspect object. Integrate /api/bulkemail/campaign on server to actually dispatch emails.");
          if (progressText) progressText.textContent = "Failed to send campaign.";
        } finally {
          disableControls(false);
        }
      }

      // ----------------------
      // Widget sender (compact widget at bottom)
      // ----------------------
      async function sendCampaignWidget() {
        const btn = document.getElementById("sendCampaignBtn");
        if (btn) btn.disabled = true;
        updateStatus("Preparing...");

        try {
          const subjectInput = (document.getElementById("subjectInput") || {}).value || "";
          const editorEl = document.getElementById("editorBody");
          const widgetBody = editorEl ? editorEl.innerHTML : (document.getElementById("bodyInput") || {}).value || "";

          if (!subjectInput || !widgetBody) {
            alert("Please provide both a subject and a body.");
            if (btn) btn.disabled = false;
            return;
          }

          updateStatus("Gathering contacts...");
          const contacts = await gatherContacts();
          console.log("widget contacts", contacts);
          if (!contacts.length) {
            alert("No contacts found. Upload a CSV or paste emails into the textarea.");
            if (btn) btn.disabled = false;
            return;
          }

          if (!confirm("Send to " + contacts.length + " contacts? Click OK to proceed.")) {
            if (btn) btn.disabled = false;
            return;
          }

          updateStatus("Sending...");

          // provider mapping
          const rawProvider = (document.getElementById("emailService") || {}).value || emailService || "webmail";
          const provider = rawProvider === "smtp" ? "webmail" : rawProvider;
          const user = (document.getElementById("emailAddress") || {}).value || undefined;
          const pass = (document.getElementById("passwordService") || {}).value || undefined;

          console.log("sendCampaignWidget -> provider:", provider, "user present:", !!user, "contacts:", contacts.length);

          const payload = {
            provider,
            ...(user ? { user } : {}),
            ...(pass ? { pass } : {}),
            subject: subjectInput,
            body: widgetBody,
            contacts,
          };

          const res = await fetch("/api/bulkemail/campaign", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });

          if (!res.ok) {
            const txt = await res.text();
            console.error("Server error response:", txt);
            alert("Server error: " + res.status + " â€” see console for details.");
            updateStatus("Error");
            if (btn) btn.disabled = false;
            return;
          }

          const data = await res.json();
          console.log("Campaign send results:", data);

          const ok = data.results ? data.results.filter((r) => r.ok).length : 0;
          const failed = data.results ? data.results.length - ok : 0;
          updateStatus("Done: " + ok + " success, " + failed + " failed.");
          alert("Campaign complete. Success: " + ok + ", Failed: " + failed + ". Check console for details.");
        } catch (err) {
          console.error("sendCampaignWidget error", err);
          alert("Error sending campaign: " + (err && err.message ? err.message : err));
          updateStatus("Error");
        } finally {
          const btn = document.getElementById("sendCampaignBtn");
          if (btn) btn.disabled = false;
        }
      }

      // ----- small CSV helpers used by widget -----
      function parseCSVTextToEmails(text) {
        const emails = [];
        const lines = text.split(/\r?\n/);
        for (const line of lines) {
          if (!line) continue;
          const parts = line.split(/[,;\t]+/);
          for (const p of parts) {
            const candidate = p.trim().replace(/^"|"$/g, "");
            if (candidate && candidate.includes("@") && candidate.indexOf(" ") === -1) {
              emails.push(candidate);
              break;
            }
          }
        }
        return emails;
      }

      async function fileToEmails(file) {
        if (!file) return [];
        const text = await file.text();
        return parseCSVTextToEmails(text);
      }

      async function gatherContacts() {
        const fileInput = document.getElementById("csvFileInput");
        const textarea = document.getElementById("contactsTextarea");

        if (fileInput && fileInput.files && fileInput.files.length) {
          try {
            const arr = await fileToEmails(fileInput.files[0]);
            return arr;
          } catch (err) {
            console.error("CSV parse error", err);
            return [];
          }
        }

        if (textarea && textarea.value.trim()) {
          const raw = textarea.value.trim();
          const arr = raw.split(/[,\r\n]+/).map((s) => s.trim()).filter(Boolean);
          return arr.filter((s) => s.includes("@"));
        }

        return [];
      }

      function updateStatus(msg) {
        const el = document.getElementById("sendStatus");
        if (el) el.textContent = msg || "";
      }

      // Preview contacts (widget)
      document.getElementById("previewContactsBtn")?.addEventListener("click", async (e) => {
        e.preventDefault();
        const contacts = await gatherContacts();
        if (!contacts.length) {
          alert("No contacts found. Upload CSV or paste emails in the textarea.");
          return;
        }
        const preview = contacts.slice(0, 200).join("\n");
        const previewWindow = window.open("", "", "width=600,height=400,scrollbars=yes");
        previewWindow.document.write("<pre>" + preview.replace(/</g, "&lt;") + "</pre>");
      });

      // Attach main SendNow and widget bindings once DOM is ready
      document.addEventListener("DOMContentLoaded", () => {
        // Bind main Send Now
        const sendNowEl = document.getElementById("sendBtn");
        if (sendNowEl) {
          sendNowEl.addEventListener("click", (e) => {
            e.preventDefault();
            const rawProvider = (document.getElementById("emailService") || {}).value;
            console.log("Send Now clicked â€” selected provider:", rawProvider);
            // sync state
            emailService = rawProvider || emailService;
            sendCampaignMain();
          });
        }

        // Bind widget send
        const widgetBtn = document.getElementById("sendCampaignBtn");
        if (widgetBtn) {
          widgetBtn.addEventListener("click", (e) => {
            e.preventDefault();
            sendCampaignWidget();
          });
        }

        // Save template button
        const saveBtn = document.getElementById("saveTemplateBtn");
        if (saveBtn) {
          saveBtn.addEventListener("click", () => {
            const id = "tpl_" + Date.now();
            TEMPLATES.push({ id, name: title || "Untitled", title, subject, body });
            renderTemplates();
            alert("Template saved (in-memory). Persist templates on the server to keep them.");
          });
        }

        // Preview button
        const previewBtn = document.getElementById("previewBtn");
        if (previewBtn) {
          previewBtn.addEventListener("click", () => {
            const win = window.open("", "_blank", "width=700,height=600");
            win.document.write('<html><head><title>Preview</title></head><body style="font-family:Arial,Helvetica,sans-serif;padding:20px">');
            win.document.write("<h4>" + (subject || "No subject") + "</h4>");
            win.document.write(body || "<i>No message body</i>");
            win.document.write("<hr/><div>" + (bestRegards || "") + "</div>");
            win.document.write("</body></html>");
            win.document.close();
          });
        }

        renderTemplates();
        updatePreview();
      });
    </script>
    <!-- ===== End widget ===== -->
  </body>
</html>
